{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation template to create resources for an ECS cluster.",
  "Parameters": {
    "EcsAmiId": {
      "Type": "String",
      "Description": "ECS EC2 AMI id",
      "Default": "ami-eca289fb"
    },
    "EcsInstanceType": {
      "Type": "String",
      "Description": "ECS EC2 instance type",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.nano",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "g2.2xlarge",
        "g2.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "VpcId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "VPC in which to create stack"
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the ECS instances"
    },
    "SubnetIds": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "Subnet in which to create container instances"
    },
    "AsgMinSize": {
      "Type": "Number",
      "Description": "Minimum size of ECS Auto Scaling Group",
      "Default": "1"
    },
    "AsgMaxSize": {
      "Type": "Number",
      "Description": "Maximum size of ECS Auto Scaling Group",
      "Default": "5"
    },
    "AsgDesiredSize": {
      "Type": "Number",
      "Description": "Desired Capacity of the ECS Auto Scaling Group",
      "Default": "3"
    }
  },
  "Resources": {
    "Cluster": {
      "Type" : "AWS::ECS::Cluster",
      "Properties" : {
        "ClusterName" : {"Ref": "AWS::StackName"}
      }
    },
    "ALBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "ALB Security Group",
        "VpcId": {"Ref": "VpcId"},
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : 80,
            "ToPort" : 80,
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : 443,
            "ToPort" : 443,
            "CidrIp" : "0.0.0.0/0"
          }]
      }
    },
    "EcsSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "ECS Allowed Ports",
        "VpcId": {"Ref": "VpcId"},
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : 32768,
          "ToPort" : 61000,
          "SourceSecurityGroupId" : { "Ref" : "ALBSecurityGroup" }
        } ]
      }
    },
    "EcsInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
        ],
        "Policies": [ {
          "PolicyName": "ECS-CloudWatchLogs",
          "PolicyDocument": {
            "Version" : "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents",
                  "logs:DescribeLogStreams"
                ],
                "Resource": [
                  "arn:aws:logs:*:*:*"
                ]
              }
            ]
          }
        } ]
      }
    },
    "EcsInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "EcsInstanceRole"
          }
        ]
      }
    },
    "EcsInstanceLc": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": { "Ref" : "EcsAmiId" },
        "InstanceType": {
          "Ref": "EcsInstanceType"
        },
        "AssociatePublicIpAddress": false,
        "IamInstanceProfile": {
          "Ref": "EcsInstanceProfile"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [ {"Ref": "EcsSecurityGroup"}],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "Content-Type: multipart/mixed; boundary=\"==BOUNDARY==\"\n",
                "MIME-Version: 1.0\n",
                "\n",
                "--==BOUNDARY==\n",
                "MIME-Version: 1.0\n",
                "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                "#!/bin/bash\n",
                "echo ECS_CLUSTER=",
                {
                  "Ref": "Cluster"
                },
                " >> /etc/ecs/ecs.config\n",
                "--==BOUNDARY==\n",
                "MIME-Version: 1.0\n",
                "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                "#!/bin/bash\n",
                "# Install awslogs and the jq JSON parser\n",
                "yum install -y awslogs jq\n",
                "# Inject the CloudWatch Logs configuration file contents\n",
                "cat > /etc/awslogs/awslogs.conf <<- EOF\n",
                "[general]\n",
                "state_file = /var/lib/awslogs/agent-state\n",
                "\n",
                "[/var/log/dmesg]\n",
                "file = /var/log/dmesg\n",
                "log_group_name = /var/log/dmesg\n",
                "log_stream_name = {cluster}/{container_instance_id}\n",
                "\n",
                "[/var/log/messages]\n",
                "file = /var/log/messages\n",
                "log_group_name = /var/log/messages\n",
                "log_stream_name = {cluster}/{container_instance_id}\n",
                "datetime_format = %b %d %H:%M:%S\n",
                "\n",
                "[/var/log/docker]\n",
                "file = /var/log/docker\n",
                "log_group_name = /var/log/docker\n",
                "log_stream_name = {cluster}/{container_instance_id}\n",
                "datetime_format = %Y-%m-%dT%H:%M:%S.%f\n",
                "\n",
                "[/var/log/ecs/ecs-init.log]\n",
                "file = /var/log/ecs/ecs-init.log.*\n",
                "log_group_name = /var/log/ecs/ecs-init.log\n",
                "log_stream_name = {cluster}/{container_instance_id}\n",
                "datetime_format = %Y-%m-%dT%H:%M:%SZ\n",
                "\n",
                "[/var/log/ecs/ecs-agent.log]\n",
                "file = /var/log/ecs/ecs-agent.log.*\n",
                "log_group_name = /var/log/ecs/ecs-agent.log\n",
                "log_stream_name = {cluster}/{container_instance_id}\n",
                "datetime_format = %Y-%m-%dT%H:%M:%SZ\n",
                "\n",
                "[/var/log/ecs/audit.log]\n",
                "file = /var/log/ecs/audit.log.*\n",
                "log_group_name = /var/log/ecs/audit.log\n",
                "log_stream_name = {cluster}/{container_instance_id}\n",
                "datetime_format = %Y-%m-%dT%H:%M:%SZ\n",
                "\n",
                "EOF\n",
                "\n",
                "--==BOUNDARY==\n",

                "MIME-Version: 1.0\n",
                "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                "#!/bin/bash\n",
                "# Set the region to send CloudWatch Logs data to (the region where the container instance is located)\n",
                "region=$(curl 169.254.169.254/latest/meta-data/placement/availability-zone | sed s'/.$//')\n",
                "sed -i -e \"s/region = us-east-1/region = $region/g\" /etc/awslogs/awscli.conf\n",
                "\n",
                "--==BOUNDARY==\n",
                "MIME-Version: 1.0\n",
                "Content-Type: text/upstart-job; charset=\"us-ascii\"\n",
                "\n",
                "#upstart-job\n",
                "description \"Configure and start CloudWatch Logs agent on Amazon ECS container instance\"\n",
                "author \"Amazon Web Services\"\n",
                "start on started ecs",
                "\n",
                "script\n",
                "exec 2>>/var/log/ecs/cloudwatch-logs-start.log\n",
                "set -x\n",
                "\n",
                "until curl -s http://localhost:51678/v1/metadata\n",
                "do\n",
                "sleep 1\n",
                "done\n",
                "\n",
                "# Grab the cluster and container instance ARN from instance metadata\n",
                "cluster=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .Cluster')\n",
                "container_instance_id=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .ContainerInstanceArn' | awk -F/ '{print $2}' )\n",
                "\n",
                "# Replace the cluster name and container instance ID placeholders with the actual values\n",
                "sed -i -e \"s/{cluster}/$cluster/g\" /etc/awslogs/awslogs.conf\n",
                "sed -i -e \"s/{container_instance_id}/$container_instance_id/g\" /etc/awslogs/awslogs.conf\n",
                "\n",
                "service awslogs start\n",
                "chkconfig awslogs on\n",
                "end script\n",
                "--==BOUNDARY==--\n"
              ]
            ]
          }
        }
      }
    },
    "EcsInstanceAsg": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": {"Ref": "SubnetIds"},
        "LaunchConfigurationName": {"Ref": "EcsInstanceLc"},
        "MinSize": {"Ref": "AsgMinSize"},
        "MaxSize": {
          "Ref": "AsgMaxSize"
        },
        "DesiredCapacity": {
          "Ref": "AsgDesiredSize"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Sub": "ECS Instance - ${AWS::StackName}"},
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "CPUScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AutoScalingGroupName" : { "Ref" : "EcsInstanceAsg" },
        "PolicyType" : "StepScaling",
        "AdjustmentType" : "PercentChangeInCapacity",
        "MetricAggregationType" : "Average",
        "EstimatedInstanceWarmup" : "60",
        "StepAdjustments": [
          {
            "MetricIntervalLowerBound": "0",
            "MetricIntervalUpperBound" : "10",
            "ScalingAdjustment": "0"
          },
          {
            "MetricIntervalLowerBound": "10",
            "MetricIntervalUpperBound" : "20",
            "ScalingAdjustment": "10"
          },
          {
            "MetricIntervalLowerBound": "20",
            "ScalingAdjustment": "30"
          }
        ]
      }
    },
    "CPUScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AutoScalingGroupName" : { "Ref" : "EcsInstanceAsg" },
        "PolicyType" : "StepScaling",
        "AdjustmentType" : "PercentChangeInCapacity",
        "MetricAggregationType" : "Average",
        "EstimatedInstanceWarmup" : "60",
        "StepAdjustments": [
          {
            "MetricIntervalLowerBound": "-10",
            "MetricIntervalUpperBound" : "0",
            "ScalingAdjustment": "0"
          },
          {
            "MetricIntervalLowerBound": "-20",
            "MetricIntervalUpperBound" : "-10",
            "ScalingAdjustment": "-10"
          },
          {
            "MetricIntervalUpperBound": "-20",
            "ScalingAdjustment": "-30"
          }
        ]
      }
    },
    "CPUResAlarmHigh" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "CPU alarm for ECS cluster high cpu reserve",
        "AlarmActions" : [ { "Ref" : "CPUScaleUpPolicy" } ],
        "MetricName" : "CPUReservation",
        "Namespace" : "AWS/ECS",
        "Statistic" : "Average",
        "Period" : "60",
        "EvaluationPeriods" : "5",
        "Threshold" : "60",
        "ComparisonOperator" : "GreaterThanThreshold",
        "Dimensions" : [ {
          "Name" : "ClusterName",
          "Value" : { "Ref" : "AWS::StackName" }
        } ]
      }
    },
    "CPUUtilAlarmHigh" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "CPU alarm for ECS cluster high usage",
        "AlarmActions" : [ { "Ref" : "CPUScaleUpPolicy" } ],
        "MetricName" : "CPUUtilization",
        "Namespace" : "AWS/ECS",
        "Statistic" : "Average",
        "Period" : "60",
        "EvaluationPeriods" : "2",
        "Threshold" : "60",
        "ComparisonOperator" : "GreaterThanThreshold",
        "Dimensions" : [ {
          "Name" : "ClusterName",
          "Value" : { "Ref" : "AWS::StackName" }
        } ]
      }
    },
    "CPUResAlarmLow" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "CPU alarm for ECS cluster low cpu reserve",
        "AlarmActions" : [ { "Ref" : "CPUScaleDownPolicy" } ],
        "MetricName" : "CPUReservation",
        "Namespace" : "AWS/ECS",
        "Statistic" : "Average",
        "Period" : "60",
        "EvaluationPeriods" : "5",
        "Threshold" : "40",
        "ComparisonOperator" : "LessThanThreshold",
        "Dimensions" : [ {
          "Name" : "ClusterName",
          "Value" : { "Ref" : "AWS::StackName" }
        } ]
      }
    }
  },
  "Outputs" : {
    "VpcId" : {
      "Description" : "VPC ID",
      "Value" : { "Ref" : "VpcId" },
      "Export" : {
        "Name" : {"Fn::Sub": "${AWS::StackName}-VpcId" }
      }
    },
    "ALBSecurityGroup" : {
      "Description": "The ID of the ALB Security group created",
      "Value" : { "Fn::GetAtt" : [ "ALBSecurityGroup", "GroupId" ]},
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-ALB-SecurityGroupID"
        }
      }
    },
    "ClusterName" : {
      "Description": "The name of the ECS Cluster created",
      "Value" : { "Ref": "Cluster"},
      "Export" : {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-ClusterName"
        }
      }
    }
  }
}