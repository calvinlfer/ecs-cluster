{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation template to create resources for an ECS cluster.",
  "Parameters": {
    "EcsAmiId": {
      "Type": "String",
      "Description": "ECS EC2 AMI id",
      "Default": "ami-eca289fb"
    },
    "EcsInstanceType": {
      "Type": "String",
      "Description": "ECS EC2 instance type",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.nano",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "g2.2xlarge",
        "g2.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "VpcId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "VPC in which to create stack"
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the ECS instances"
    },
    "SubnetIds": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "Subnet in which to create container instances"
    },
    "AsgMinSize": {
      "Type": "Number",
      "Description": "Minimum size of ECS Auto Scaling Group",
      "Default": "1"
    },
    "AsgMaxSize": {
      "Type": "Number",
      "Description": "Maximum size of ECS Auto Scaling Group",
      "Default": "5"
    },
    "AsgDesiredSize": {
      "Type": "Number",
      "Description": "Desired Capacity of the ECS Auto Scaling Group",
      "Default": "3"
    },
    "EfsStackName": {
      "Type": "String",
      "Description": "Optional - The EFS stack which contains the file system needed to be mounted in the container instances",
      "Default": ""
    },
    "EfsMountPath": {
      "Type": "String",
      "Description": "Optional - The path at which to create the volume mount for EFS",
      "Default": "/mnt/efs"
    }
  },
  "Conditions": {
    "CreateEFSMount": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {"Ref": "EfsStackName"},
            ""
          ]
        }
      ]
    }
  },
  "Resources": {
    "Cluster": {
      "Type" : "AWS::ECS::Cluster",
      "Properties" : {
        "ClusterName" : {"Ref": "AWS::StackName"}
      }
    },
    "EcsServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2008-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole"
        ]
      }
    },
    "LoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security Group for load balancers which need to route traffic to container instances",
        "VpcId": {"Ref": "VpcId"},
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Sub": "ECS Load Balancer SG - ${AWS::StackName}"}
          }
        ]
      }
    },
    "EcsSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "ECS Allowed Ports",
        "VpcId": {"Ref": "VpcId"},
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : 32768,
          "ToPort" : 61000,
          "SourceSecurityGroupId" : { "Ref" : "LoadBalancerSecurityGroup" }
        } ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Sub": "ECS Container Instance SG - ${AWS::StackName}"}
          }
        ]
      }
    },
    "EcsInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
        ],
        "Policies": [ {
          "PolicyName": "ECS-CloudWatchLogs",
          "PolicyDocument": {
            "Version" : "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents",
                  "logs:DescribeLogStreams"
                ],
                "Resource": [
                  "arn:aws:logs:*:*:*"
                ]
              }
            ]
          }
        } ]
      }
    },
    "EcsInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "EcsInstanceRole"
          }
        ]
      }
    },
    "EcsInstanceLc": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": { "Ref" : "EcsAmiId" },
        "InstanceType": {
          "Ref": "EcsInstanceType"
        },
        "AssociatePublicIpAddress": false,
        "IamInstanceProfile": {
          "Ref": "EcsInstanceProfile"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": {
          "Fn::If": [
            "CreateEFSMount",
            [
              {
                "Ref": "EcsSecurityGroup"
              },
              {
                "Fn::ImportValue": {
                  "Fn::Sub": "${EfsStackName}-FSAccessSecurityGroupID"
                }
              }
            ],
            [
              {
                "Ref": "EcsSecurityGroup"
              }
            ]
          ]
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "Content-Type: multipart/mixed; boundary=\"==BOUNDARY==\"\n",
                "MIME-Version: 1.0\n",
                "\n",
                "--==BOUNDARY==\n",
                "MIME-Version: 1.0\n",
                "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                "#!/bin/bash\n",
                "echo ECS_CLUSTER=",
                {
                  "Ref": "Cluster"
                },
                " >> /etc/ecs/ecs.config\n",
                {"Fn::If": [
                  "CreateEFSMount",
                  {"Fn::Join": [
                    "",
                    [
                      "mkdir -p /etc/efs\n",
                      "echo EFS_FILE_SYSTEM_ID=",
                      {
                        "Fn::ImportValue": {"Fn::Sub": "${EfsStackName}-FileSystemId"}
                      },
                      " >> /etc/efs/efs.config\n",
                      "echo EFS_MOUNT_POINT=",
                      {
                        "Ref": "EfsMountPath"
                      },
                      " >> /etc/efs/efs.config\n"
                    ]
                  ]},
                  ""
                ]},
                "--==BOUNDARY==\n",
                "MIME-Version: 1.0\n",
                "Content-Type: text/x-include-url; charset=\"us-ascii\"\n",
                "\n",
                "https://s3.amazonaws.com/cf-cloud-init-scripts/ecs/UserDataCloudWatchLogs\n",
                {"Fn::If": [
                  "CreateEFSMount",
                  {"Fn::Join": [
                    "",
                    [
                      "https://s3.amazonaws.com/cf-cloud-init-scripts/efs/UserDataEFS\n",
                      "https://s3.amazonaws.com/cf-cloud-init-scripts/ecs/UserDataRestartDocker\n"
                    ]
                  ]},
                  ""
                ]},
                "--==BOUNDARY==\n"
              ]
            ]
          }
        }
      }
    },
    "EcsInstanceAsg": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": {"Ref": "SubnetIds"},
        "LaunchConfigurationName": {"Ref": "EcsInstanceLc"},
        "MinSize": {"Ref": "AsgMinSize"},
        "MaxSize": {
          "Ref": "AsgMaxSize"
        },
        "DesiredCapacity": {
          "Ref": "AsgDesiredSize"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Sub": "ECS Container Instance - ${AWS::StackName}"},
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "MemScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AutoScalingGroupName" : { "Ref" : "EcsInstanceAsg" },
        "PolicyType" : "StepScaling",
        "AdjustmentType" : "PercentChangeInCapacity",
        "MetricAggregationType" : "Average",
        "EstimatedInstanceWarmup" : "60",
        "StepAdjustments": [
          {
            "MetricIntervalLowerBound": "0",
            "MetricIntervalUpperBound" : "10",
            "ScalingAdjustment": "0"
          },
          {
            "MetricIntervalLowerBound": "10",
            "MetricIntervalUpperBound" : "20",
            "ScalingAdjustment": "10"
          },
          {
            "MetricIntervalLowerBound": "20",
            "ScalingAdjustment": "30"
          }
        ]
      }
    },
    "MemScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AutoScalingGroupName" : { "Ref" : "EcsInstanceAsg" },
        "PolicyType" : "StepScaling",
        "AdjustmentType" : "PercentChangeInCapacity",
        "MetricAggregationType" : "Average",
        "EstimatedInstanceWarmup" : "120",
        "StepAdjustments": [
          {
            "MetricIntervalLowerBound": "-10",
            "MetricIntervalUpperBound" : "0",
            "ScalingAdjustment": "0"
          },
          {
            "MetricIntervalLowerBound": "-20",
            "MetricIntervalUpperBound" : "-10",
            "ScalingAdjustment": "-10"
          },
          {
            "MetricIntervalUpperBound": "-20",
            "ScalingAdjustment": "-30"
          }
        ]
      }
    },
    "MemResAlarmHigh" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "Memory alarm for ECS cluster high memory reserve",
        "AlarmActions" : [ { "Ref" : "MemScaleUpPolicy" } ],
        "MetricName" : "MemoryReservation",
        "Namespace" : "AWS/ECS",
        "Statistic" : "Average",
        "Period" : "60",
        "EvaluationPeriods" : "3",
        "Threshold" : "60",
        "ComparisonOperator" : "GreaterThanThreshold",
        "Dimensions" : [ {
          "Name" : "ClusterName",
          "Value" : { "Ref" : "AWS::StackName" }
        } ]
      }
    },
    "MemUtilAlarmHigh" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "Memory alarm for ECS cluster high memory usage",
        "AlarmActions" : [ { "Ref" : "MemScaleUpPolicy" } ],
        "MetricName" : "MemoryUtilization",
        "Namespace" : "AWS/ECS",
        "Statistic" : "Average",
        "Period" : "60",
        "EvaluationPeriods" : "2",
        "Threshold" : "60",
        "ComparisonOperator" : "GreaterThanThreshold",
        "Dimensions" : [ {
          "Name" : "ClusterName",
          "Value" : { "Ref" : "AWS::StackName" }
        } ]
      }
    },
    "MemResAlarmLow" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "Memory alarm for ECS cluster low memory reserve",
        "AlarmActions" : [ { "Ref" : "MemScaleDownPolicy" } ],
        "MetricName" : "MemoryReservation",
        "Namespace" : "AWS/ECS",
        "Statistic" : "Average",
        "Period" : "60",
        "EvaluationPeriods" : "10",
        "Threshold" : "40",
        "ComparisonOperator" : "LessThanThreshold",
        "Dimensions" : [ {
          "Name" : "ClusterName",
          "Value" : { "Ref" : "AWS::StackName" }
        } ]
      }
    }
  },
  "Outputs" : {
    "VpcId" : {
      "Description" : "VPC ID",
      "Value" : { "Ref" : "VpcId" },
      "Export" : {
        "Name" : {"Fn::Sub": "${AWS::StackName}-VpcId" }
      }
    },
    "LoadBalancerSecurityGroup" : {
      "Description": "The ID of the Load Balancer Security group created",
      "Value" : { "Fn::GetAtt" : [ "LoadBalancerSecurityGroup", "GroupId" ]},
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-LB-SecurityGroupId"
        }
      }
    },
    "InstanceSecurityGroup" : {
      "Description": "The ID of the ecs container instance security group created",
      "Value" : { "Fn::GetAtt" : [ "EcsSecurityGroup", "GroupId" ]},
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-EcsSecurityGroupId"
        }
      }
    },
    "ServiceRole": {
      "Description": "The ARN of the ECS service role",
      "Value": {"Fn::GetAtt": ["EcsServiceRole", "Arn"]},
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-EcsServiceRole"
        }
      }
    },
    "ClusterName" : {
      "Description": "The name of the ECS Cluster created",
      "Value" : { "Ref": "Cluster"},
      "Export" : {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-ClusterName"
        }
      }
    },
    "HasEfsMount": {
      "Description": "True if this cluster uses an EFS mount",
      "Value": {"Fn::If": ["CreateEFSMount", "true", "false"]},
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-HasEfsMount"
        }
      }
    },
    "EfsMountPath": {
      "Description": "The path of the EFS mount volume on the container instances",
      "Value": {"Ref": "EfsMountPath"},
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-MountPath"
        }
      }
    }
  }
}