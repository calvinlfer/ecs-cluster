{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation template to create resources for an ECS cluster.",
  "Parameters": {
    "EcsAmiId": {
      "Type": "String",
      "Description": "ECS EC2 AMI id",
      "Default": "ami-eca289fb"
    },
    "EcsInstanceType": {
      "Type": "String",
      "Description": "ECS EC2 instance type",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.nano",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "g2.2xlarge",
        "g2.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "VpcId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "VPC in which to create stack"
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the ECS instances"
    },
    "ELBSubnetIds": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "Public subnets in which the ELB is running"
    },
    "SubnetId1": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Subnet1 in which to create container instances"
    },
    "SubnetId2": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Subnet2 in which to create container instances"
    },
    "AsgMinSize": {
      "Type": "Number",
      "Description": "Minimum size of ECS Auto Scaling Group",
      "Default": "1"
    },
    "AsgMaxSize": {
      "Type": "Number",
      "Description": "Maximum size of ECS Auto Scaling Group",
      "Default": "5"
    },
    "AsgDesiredSize": {
      "Type": "Number",
      "Description": "Desired Capacity of the ECS Auto Scaling Group",
      "Default": "1"
    },
    "EcsClusterName": {
      "Type": "String",
      "Description": "ECS Cluster Name",
      "Default": "default"
    }
  },
  "Resources": {
    "ECSCluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "ClusterName": {
          "Ref": "EcsClusterName"
        }
      }
    },
    "ALBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "ALB Security Group",
        "VpcId": {
          "Ref": "VpcId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "JenkinsELBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Jenkins ELB Security Group",
        "VpcId": {
          "Ref": "VpcId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 8080,
            "ToPort": 8080,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 50000,
            "ToPort": 50000,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "EFSMountTargetSecurityGroup": {
      "Properties": {
        "VpcId": {
          "Ref": "VpcId"
        },
        "GroupDescription": "Security group to allow inbound NFS for EFS mount target from ECS container instances",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "2049",
            "ToPort": "2049",
            "SourceSecurityGroupId": {
              "Ref": "ECSClusterSecurityGroup"
            }
          }
        ]
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "EFSFileSystem": {
      "Type": "AWS::EFS::FileSystem",
      "Properties": {
        "FileSystemTags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "ECSCluster"
            }
          }
        ],
        "PerformanceMode": "generalPurpose"
      }
    },
    "EFSMountTarget1": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": {
          "Ref": "EFSFileSystem"
        },
        "SecurityGroups": [
          {
            "Ref": "EFSMountTargetSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "SubnetId1"
        }
      }
    },
    "EFSMountTarget2": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": {
          "Ref": "EFSFileSystem"
        },
        "SecurityGroups": [
          {
            "Ref": "EFSMountTargetSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "SubnetId2"
        }
      }
    },
    "ECSClusterSecurityGroup": {
      "Properties": {
        "VpcId": {
          "Ref": "VpcId"
        },
        "GroupDescription": "Self-referencing security group to allow all traffic between ECS container instances and ELBs"
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "ECSClusterSecurityGroupEgress": {
      "Properties": {
        "DestinationSecurityGroupId": {
          "Ref": "ECSClusterSecurityGroup"
        },
        "FromPort": "-1",
        "GroupId": {
          "Ref": "ECSClusterSecurityGroup"
        },
        "IpProtocol": "-1",
        "ToPort": "-1"
      },
      "Type": "AWS::EC2::SecurityGroupEgress"
    },
    "ECSClusterSecurityGroupIngress": {
      "Properties": {
        "FromPort": "-1",
        "GroupId": {
          "Ref": "ECSClusterSecurityGroup"
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "ECSClusterSecurityGroup"
        },
        "ToPort": "-1"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "ECSContainerInstancesSecurityGroup": {
      "Properties": {
        "VpcId": {
          "Ref": "VpcId"
        },
        "GroupDescription": "Security group for ECS container instances",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "EcsInstanceRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
        ],
        "Policies": [
          {
            "PolicyName": "ECS-CloudWatchLogs",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:DescribeLogStreams"
                  ],
                  "Resource": [
                    "arn:aws:logs:*:*:*"
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "AmazonEC2ContainerServiceJenkinsPluginRole",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:DescribeContainerInstances",
                    "ecs:ListClusters",
                    "ecs:RegisterTaskDefinition"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:RunTask"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:ListContainerInstances",
                    "ecs:StopTask"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:ecs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":cluster/",
                        {
                          "Ref": "ECSCluster"
                        }
                      ]
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:StopTask"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:ecs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":task/*"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "EcsInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "EcsInstanceRole"
          }
        ]
      }
    },
    "ECSServiceRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "AmazonEC2ContainerServiceRole",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:AuthorizeSecurityGroupIngress",
                    "ec2:Describe*",
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "EcsInstanceLc": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": {
          "Ref": "EcsAmiId"
        },
        "InstanceType": {
          "Ref": "EcsInstanceType"
        },
        "AssociatePublicIpAddress": false,
        "IamInstanceProfile": {
          "Ref": "EcsInstanceProfile"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "ECSClusterSecurityGroup"
          },
          {
            "Ref": "ECSContainerInstancesSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "Content-Type: multipart/mixed; boundary=\"==BOUNDARY==\"\n",
                "MIME-Version: 1.0\n",
                "\n",
                "--==BOUNDARY==\n",
                "MIME-Version: 1.0\n",
                "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                "#!/bin/bash\n",
                "echo ECS_CLUSTER=",
                {
                  "Ref": "ECSCluster"
                },
                " >> /etc/ecs/ecs.config\n",
                "\n",
                "--==BOUNDARY==\n",
                "MIME-Version: 1.0\n",
                "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                "#!/bin/bash\n",
                "# Install awslogs and the jq JSON parser\n",
                "yum install -y awslogs jq\n",
                "# Inject the CloudWatch Logs configuration file contents\n",
                "cat > /etc/awslogs/awslogs.conf <<- EOF\n",
                "[general]\n",
                "state_file = /var/lib/awslogs/agent-state\n",
                "\n",
                "[/var/log/dmesg]\n",
                "file = /var/log/dmesg\n",
                "log_group_name = /var/log/dmesg\n",
                "log_stream_name = {cluster}/{container_instance_id}\n",
                "\n",
                "[/var/log/messages]\n",
                "file = /var/log/messages\n",
                "log_group_name = /var/log/messages\n",
                "log_stream_name = {cluster}/{container_instance_id}\n",
                "datetime_format = %b %d %H:%M:%S\n",
                "\n",
                "[/var/log/docker]\n",
                "file = /var/log/docker\n",
                "log_group_name = /var/log/docker\n",
                "log_stream_name = {cluster}/{container_instance_id}\n",
                "datetime_format = %Y-%m-%dT%H:%M:%S.%f\n",
                "\n",
                "[/var/log/ecs/ecs-init.log]\n",
                "file = /var/log/ecs/ecs-init.log.*\n",
                "log_group_name = /var/log/ecs/ecs-init.log\n",
                "log_stream_name = {cluster}/{container_instance_id}\n",
                "datetime_format = %Y-%m-%dT%H:%M:%SZ\n",
                "\n",
                "[/var/log/ecs/ecs-agent.log]\n",
                "file = /var/log/ecs/ecs-agent.log.*\n",
                "log_group_name = /var/log/ecs/ecs-agent.log\n",
                "log_stream_name = {cluster}/{container_instance_id}\n",
                "datetime_format = %Y-%m-%dT%H:%M:%SZ\n",
                "\n",
                "[/var/log/ecs/audit.log]\n",
                "file = /var/log/ecs/audit.log.*\n",
                "log_group_name = /var/log/ecs/audit.log\n",
                "log_stream_name = {cluster}/{container_instance_id}\n",
                "datetime_format = %Y-%m-%dT%H:%M:%SZ\n",
                "\n",
                "EOF\n",
                "\n",
                "--==BOUNDARY==\n",
                "MIME-Version: 1.0\n",
                "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                "#!/bin/bash\n",
                "# Set the region to send CloudWatch Logs data to (the region where the container instance is located)\n",
                "region=$(curl 169.254.169.254/latest/meta-data/placement/availability-zone | sed s'/.$//')\n",
                "sed -i -e \"s/region = us-east-1/region = $region/g\" /etc/awslogs/awscli.conf\n",
                "\n",
                "--==BOUNDARY==\n",
                "MIME-Version: 1.0\n",
                "Content-Type: text/upstart-job; charset=\"us-ascii\"\n",
                "\n",
                "#upstart-job\n",
                "description \"Configure and start CloudWatch Logs agent on Amazon ECS container instance\"\n",
                "author \"Amazon Web Services\"\n",
                "start on started ecs",
                "\n",
                "script\n",
                "exec 2>>/var/log/ecs/cloudwatch-logs-start.log\n",
                "set -x\n",
                "\n",
                "until curl -s http://localhost:51678/v1/metadata\n",
                "do\n",
                "sleep 1\n",
                "done\n",
                "\n",
                "# Grab the cluster and container instance ARN from instance metadata\n",
                "cluster=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .Cluster')\n",
                "container_instance_id=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .ContainerInstanceArn' | awk -F/ '{print $2}' )\n",
                "\n",
                "# Replace the cluster name and container instance ID placeholders with the actual values\n",
                "sed -i -e \"s/{cluster}/$cluster/g\" /etc/awslogs/awslogs.conf\n",
                "sed -i -e \"s/{container_instance_id}/$container_instance_id/g\" /etc/awslogs/awslogs.conf\n",
                "\n",
                "service awslogs start\n",
                "chkconfig awslogs on\n",
                "end script\n",
                "--==BOUNDARY==--\n"
              ]
            ]
          }
        }
      }
    },
    "EcsInstanceAsg": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": [
        "EFSMountTarget1"
      ],
      "Properties": {
        "VPCZoneIdentifier": [
          {
            "Ref": "SubnetId1"
          },
          {
            "Ref": "SubnetId2"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "EcsInstanceLc"
        },
        "MinSize": {
          "Ref": "AsgMinSize"
        },
        "MaxSize": {
          "Ref": "AsgMaxSize"
        },
        "DesiredCapacity": {
          "Ref": "AsgDesiredSize"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "ECS Instance - ",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            },
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "JenkinsLoadBalancer": {
      "Properties": {
        "Subnets": {
            "Ref": "ELBSubnetIds"
          },
        "SecurityGroups": [
          {
            "Ref": "ECSClusterSecurityGroup"
          },
          {
            "Ref": "JenkinsELBSecurityGroup"
          }
        ],
        "Listeners": [
          {
            "InstancePort": "8080",
            "InstanceProtocol": "HTTP",
            "LoadBalancerPort": "8080",
            "Protocol": "HTTP"
          },
          {
            "InstancePort": "50000",
            "InstanceProtocol": "TCP",
            "LoadBalancerPort": "50000",
            "Protocol": "TCP"
          }
        ],
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "30",
          "Target": "HTTP:8080/",
          "Timeout": "5",
          "UnhealthyThreshold": "5"
        }
      },
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
    },
    "JenkinsECSService": {
      "DependsOn": [
        "EcsInstanceAsg"
      ],
      "Properties": {
        "Cluster": {
          "Ref": "ECSCluster"
        },
        "DesiredCount": 1,
        "LoadBalancers": [
          {
            "ContainerName": "jenkins",
            "ContainerPort": "8080",
            "LoadBalancerName": {
              "Ref": "JenkinsLoadBalancer"
            }
          }
        ],
        "Role": {
          "Ref": "ECSServiceRole"
        },
        "TaskDefinition": {
          "Ref": "JenkinsTaskDefinition"
        }
      },
      "Type": "AWS::ECS::Service"
    },
    "JenkinsTaskDefinition": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Name": "jenkins",
            "Image": "jenkins",
            "Hostname": "jenkins",
            "Cpu": 512,
            "Memory": 2048,
            "User": "root",
            "Environment": [
              {
                "Name": "JAVA_OPTS",
                "Value": "-Djenkins.install.runSetupWizard=false"
              }
            ],
            "Essential": true,
            "MountPoints": [
              {
                "ContainerPath": "/var/jenkins_home",
                "SourceVolume": "efs-jenkins",
                "ReadOnly": false
              }
            ],
            "PortMappings": [
              {
                "HostPort": 8080,
                "ContainerPort": 8080
              },
              {
                "HostPort": 50000,
                "ContainerPort": 50000
              }
            ]
          }
        ],
        "Volumes": [
          {
            "Name": "efs-jenkins",
            "Host": {
              "SourcePath": "/data/jenkins"
            }
          }
        ]
      },
      "Type": "AWS::ECS::TaskDefinition"
    }
  },
  "Outputs": {
    "ALBSecurityGroup": {
      "Description": "The ID of the ALB Security group created",
      "Value": {
        "Fn::GetAtt": [
          "ALBSecurityGroup",
          "GroupId"
        ]
      }
    },
    "JenkinsConfigurationAlternativeJenkinsURL": {
      "Description": "Jenkins configuration: \"Alternative Jenkins URL\"",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "JenkinsLoadBalancer",
                "DNSName"
              ]
            },
            "/"
          ]
        ]
      }
    }
  }
}