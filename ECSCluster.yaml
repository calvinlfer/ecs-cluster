AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to create resources for an ECS cluster.
Parameters:
  EcsAmiId:
    Type: String
    Description: ECS EC2 AMI id
    Default: ami-d69c74c0
  EcsInstanceType:
    Type: String
    Description: ECS EC2 instance type
    Default: t2.micro
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, m3.medium, m3.large,
      m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, c3.large, c3.xlarge,
      c3.2xlarge, c3.4xlarge, c3.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge,
      r3.8xlarge, i2.xlarge, i2.2xlarge, i2.4xlarge, i2.8xlarge, g2.2xlarge, g2.8xlarge,
      d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC in which to create stack
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances
  InstanceSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet in which to create container instances
  LoadBalancerSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet in which to create load balancer instances
  AsgMinSize:
    Type: Number
    Description: Minimum size of ECS Auto Scaling Group
    Default: '1'
  AsgMaxSize:
    Type: Number
    Description: Maximum size of ECS Auto Scaling Group
    Default: '5'
  AsgDesiredSize:
    Type: Number
    Description: Desired Capacity of the ECS Auto Scaling Group
    Default: '3'
Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref 'AWS::StackName'
  EcsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: ecs.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns: ['arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole']
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for load balancers which need to route traffic
        to container instances
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub 'ECS Load Balancer SG - ${AWS::StackName}'
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: !Ref 'LoadBalancerSubnetIds'
      SecurityGroups: [!Ref 'LoadBalancerSecurityGroup']
      Tags:
      - Key: Name
        Value: !Sub 'ECS ALB - ${AWS::StackName}'
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'DefaultTargetGroup'
      LoadBalancerArn: !Ref 'LoadBalancer'
      Port: '80'
      Protocol: HTTP

  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: default
      VpcId: !Ref 'VpcId'
      Port: 80
      Protocol: HTTP
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Allowed Ports
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 32768
        ToPort: 61000
        SourceSecurityGroupId: !Ref 'LoadBalancerSecurityGroup'
      Tags:
      - Key: Name
        Value: !Sub 'ECS Container Instance SG - ${AWS::StackName}'
  EcsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns: ['arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role']
      Policies:
      - PolicyName: ECS-CloudWatchLogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents',
              'logs:DescribeLogStreams']
            Resource: ['arn:aws:logs:*:*:*']
  EcsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'EcsInstanceRole']
  EcsInstanceLc:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref 'EcsAmiId'
      InstanceType: !Ref 'EcsInstanceType'
      AssociatePublicIpAddress: false
      IamInstanceProfile: !Ref 'EcsInstanceProfile'
      KeyName: !Ref 'KeyName'
      SecurityGroups:
        - !Ref 'EcsSecurityGroup'

      # User Data configures the ECS agent to connect to the cluster we just created
      # It then run a script located in S3 which configures CloudWatch Logs for the cluster
      UserData:
        "Fn::Base64": !Sub |
          Content-Type: multipart/mixed; boundary="==BOUNDARY=="
          MIME-Version: 1.0

          --==BOUNDARY==
          MIME-Version: 1.0
          Content-Type: text/x-shellscript; charset="us-ascii"
          #!/bin/bash
          echo ECS_CLUSTER=${Cluster} >> /etc/ecs/ecs.config
          --==BOUNDARY==
          MIME-Version: 1.0
          Content-Type: text/x-include-url; charset="us-ascii"

          https://s3.amazonaws.com/cf-cloud-init-scripts/ecs/UserDataCloudWatchLogs
          --==BOUNDARY==
  EcsInstanceAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref 'InstanceSubnetIds'
      LaunchConfigurationName: !Ref 'EcsInstanceLc'
      MinSize: !Ref 'AsgMinSize'
      MaxSize: !Ref 'AsgMaxSize'
      DesiredCapacity: !Ref 'AsgDesiredSize'
      Tags:
      - Key: Name
        Value: !Sub 'ECS Container Instance - ${AWS::StackName}'
        PropagateAtLaunch: 'true'

  # Auto Scaling Policies and Alarms

  MemScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref 'EcsInstanceAsg'
      PolicyType: StepScaling
      AdjustmentType: PercentChangeInCapacity
      MetricAggregationType: Average
      EstimatedInstanceWarmup: '60'
      StepAdjustments:
      - MetricIntervalLowerBound: '0'
        MetricIntervalUpperBound: '10'
        ScalingAdjustment: '0'
      - MetricIntervalLowerBound: '10'
        MetricIntervalUpperBound: '20'
        ScalingAdjustment: '10'
      - MetricIntervalLowerBound: '20'
        ScalingAdjustment: '30'
  MemScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref 'EcsInstanceAsg'
      PolicyType: StepScaling
      AdjustmentType: PercentChangeInCapacity
      MetricAggregationType: Average
      EstimatedInstanceWarmup: '120'
      StepAdjustments:
      - MetricIntervalLowerBound: '-10'
        MetricIntervalUpperBound: '0'
        ScalingAdjustment: '0'
      - MetricIntervalLowerBound: '-20'
        MetricIntervalUpperBound: '-10'
        ScalingAdjustment: '-10'
      - MetricIntervalUpperBound: '-20'
        ScalingAdjustment: '-30'
  MemResAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Memory alarm for ECS cluster high memory reserve
      AlarmActions: [!Ref 'MemScaleUpPolicy']
      MetricName: MemoryReservation
      Namespace: AWS/ECS
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '3'
      Threshold: '60'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: ClusterName
        Value: !Ref 'AWS::StackName'
  MemUtilAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Memory alarm for ECS cluster high memory usage
      AlarmActions: [!Ref 'MemScaleUpPolicy']
      MetricName: MemoryUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '2'
      Threshold: '60'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: ClusterName
        Value: !Ref 'AWS::StackName'
  MemResAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Memory alarm for ECS cluster low memory reserve
      AlarmActions: [!Ref 'MemScaleDownPolicy']
      MetricName: MemoryReservation
      Namespace: AWS/ECS
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '10'
      Threshold: '40'
      ComparisonOperator: LessThanThreshold
      Dimensions:
      - Name: ClusterName
        Value: !Ref 'AWS::StackName'

Outputs:
  # VpcId is required by various AWS Resources, so let the dependant stack refer to the VpcId
  VpcId:
    Description: VPC ID
    Value: !Ref 'VpcId'
    Export:
      Name: !Sub '${AWS::StackName}-VpcId'
  # A ECS Service level stack can attach Listener Rules to this Listener to get load balancing
  Listener:
    Description: The ARN of the load balancer's listener
    Value: !Ref 'Listener'
    Export:
      Name: !Sub '${AWS::StackName}-Listener'
  LoadBalancerDNS:
    Description: The dns name of the app load balancer for the service
    Value: !GetAtt [LoadBalancer, DNSName]
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerDNSName'
  InstanceSecurityGroup:
    Description: The ID of the ecs container instance security group created
    Value: !GetAtt [EcsSecurityGroup, GroupId]
    Export:
      Name: !Sub '${AWS::StackName}-EcsSecurityGroupId'
  # A dependant stack can use this ECS Service role instead of creating its own. It is generic for all services
  ServiceRole:
    Description: The ARN of the ECS service role
    Value: !GetAtt [EcsServiceRole, Arn]
    Export:
      Name: !Sub '${AWS::StackName}-EcsServiceRole'
  ClusterName:
    Description: The name of the ECS Cluster created
    Value: !Ref 'Cluster'
    Export:
      Name: !Sub '${AWS::StackName}-ClusterName'
