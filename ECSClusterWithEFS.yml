AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to create resources for an ECS cluster.
Parameters:
  EcsInstanceType:
    Type: String
    Description: ECS EC2 instance type
    Default: m4.large
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, m3.medium, m3.large,
      m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, c3.large, c3.xlarge,
      c3.2xlarge, c3.4xlarge, c3.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge,
      r3.8xlarge, i2.xlarge, i2.2xlarge, i2.4xlarge, i2.8xlarge, g2.2xlarge, g2.8xlarge,
      d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC in which to create stack
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances
  InstanceSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet in which to create container instances
  AsgMinSize:
    Type: Number
    Description: Minimum size of ECS Auto Scaling Group
    Default: '1'
  AsgMaxSize:
    Type: Number
    Description: Maximum size of ECS Auto Scaling Group
    Default: '1'
  AsgDesiredSize:
    Type: Number
    Description: Desired Capacity of the ECS Auto Scaling Group
    Default: '1'
  EfsStackName:
    Type: String
    Description: The EFS stack which contains the file system needed to be mounted in the container instances
    Default: ''
  EfsMountPath:
    Type: String
    Description: The path at which to create the volume mount for EFS
    Default: /mnt/efs  

Mappings:

    # These are the latest ECS optimized AMIs as of June 2017:
    #
    #   amzn-ami-2017.03.c-amazon-ecs-optimized
    #   ECS agent:    1.14.3
    #   Docker:       17.03.1-ce
    #   ecs-init:     1.14.3-1
    #
    # You can find the latest available on this page of our documentation:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    # (note the AMI identifier is region specific)

    AWSRegionToAMI:
        us-east-1:
            AMI: ami-83af8395
        us-east-2:
            AMI: ami-9f9cbafa
        us-west-1:
            AMI: ami-c1c6eba1
        us-west-2:
            AMI: ami-767e6812
        eu-west-1:
            AMI: ami-5f140c39
        eu-west-2:
            AMI: ami-767e6812
        eu-central-1:
            AMI: ami-e656f189
        ap-northeast-1:
            AMI: ami-fd10059a
        ap-southeast-1:
            AMI: ami-1926ab7a
        ap-southeast-2:
            AMI: ami-6b6c7c08
        ca-central-1:
            AMI: ami-ead8678e

Resources:
  # Security Groups
  #   - Load Balancer Security Group
  #   - ECS Container Instance Security Group

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Allowed Ports
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 32768
        ToPort: 61000
        SourceSecurityGroupId: !Ref 'LoadBalancerSecurityGroup'  
      Tags:
      - Key: Name
        Value: !Sub 'ECS Container Instance SG - ${AWS::StackName}'

  # Application Load Balancer
  LoadBalancerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security Group for load balancers which need to route traffic
          to container instances
        VpcId: !Ref 'VpcId'
        Tags:
        - Key: Name
          Value: !Sub 'ECS Load Balancer SG - ${AWS::StackName}'

  # ECS Resources

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref 'AWS::StackName'

  EcsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: ecs.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  EcsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
      - PolicyName: ECS-CloudWatchLogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource:
            - arn:aws:logs:*:*:*

  EcsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref 'EcsInstanceRole'

  EcsInstanceLc:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
      InstanceType: !Ref 'EcsInstanceType'
      AssociatePublicIpAddress: false
      IamInstanceProfile: !Ref 'EcsInstanceProfile'
      KeyName: !Ref 'KeyName'
      SecurityGroups:
        - !Ref 'EcsSecurityGroup'
        - !ImportValue
          'Fn::Sub': '${EfsStackName}-FSAccessSecurityGroupID'

      # 1. Ensure we have the latest version of cf helper scripts
      # 2. Run all init configs in the meta data section of this resource
      # 3. Once we are done running all our scripts and they successfully ran, signal success or failure to the ASG
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash
          yum install -y aws-cfn-bootstrap awslogs jq
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource EcsInstanceLc --configsets full_install
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource EcsInstanceAsg
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          full_install:
          - install_cfn
          - install_logging
          - configure_ecs
          - install_efs
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EcsInstanceLc.Metadata.AWS::CloudFormation::Init
                action=/usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource EcsInstanceLc --configsets full_install
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_logging:
          files:
            "/etc/awslogs/awslogs.conf":
              mode: 000644
              owner: root
              group: root
              content: |
                [general]
                state_file = /var/lib/awslogs/agent-state

                [/var/log/dmesg]
                file = /var/log/dmesg
                log_group_name = /var/log/dmesg
                log_stream_name = {cluster}/{container_instance_id}

                [/var/log/messages]
                file = /var/log/messages
                log_group_name = /var/log/messages
                log_stream_name = {cluster}/{container_instance_id}
                datetime_format = %b %d %H:%M:%S

                [/var/log/docker]
                file = /var/log/docker
                log_group_name = /var/log/docker
                log_stream_name = {cluster}/{container_instance_id}
                datetime_format = %Y-%m-%dT%H:%M:%S.%f

                [/var/log/ecs/ecs-init.log]
                file = /var/log/ecs/ecs-init.log.*
                log_group_name = /var/log/ecs/ecs-init.log
                log_stream_name = {cluster}/{container_instance_id}
                datetime_format = %Y-%m-%dT%H:%M:%SZ

                [/var/log/ecs/ecs-agent.log]
                file = /var/log/ecs/ecs-agent.log.*
                log_group_name = /var/log/ecs/ecs-agent.log
                log_stream_name = {cluster}/{container_instance_id}
                datetime_format = %Y-%m-%dT%H:%M:%SZ

                [/var/log/ecs/audit.log]
                file = /var/log/ecs/audit.log.*
                log_group_name = /var/log/ecs/audit.log
                log_stream_name = {cluster}/{container_instance_id}
                datetime_format = %Y-%m-%dT%H:%M:%SZ
            "/etc/init/awslogs.conf":
              mode: 000644
              owner: root
              group: root
              content: |
                #upstart-job
                description "Configure and start CloudWatch Logs agent on Amazon ECS container instance"
                author "Amazon Web Services"
                start on started ecs

                script
                  exec 2>>/var/log/ecs/cloudwatch-logs-start.log
                  set -x

                  until curl -s http://localhost:51678/v1/metadata
                  do
                      sleep 1
                  done

                  # Grab the cluster and container instance ARN from instance metadata
                  cluster=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .Cluster')
                  container_instance_id=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .ContainerInstanceArn' | awk -F/ '{print $2}' )

                  region=$(curl 169.254.169.254/latest/meta-data/placement/availability-zone | sed s'/.$//')
                  # Replace region with actual region
                  sed -i -e "s/region = us-east-1/region = $region/g" /etc/awslogs/awscli.conf
                  # Replace the cluster name and container instance ID placeholders with the actual values
                  sed -i -e "s/{cluster}/$cluster/g" /etc/awslogs/awslogs.conf
                  sed -i -e "s/{container_instance_id}/$container_instance_id/g" /etc/awslogs/awslogs.conf

                  service awslogs start
                  chkconfig awslogs on
                end script
        configure_ecs:
          files:
            "/etc/ecs/ecs.config":
              mode: 000644
              owner: root
              group: root
              content: !Sub ECS_CLUSTER=${Cluster}
          commands:
            01_docker_group:
              command: !Sub |
                #!/bin/bash
                mkdir /etc/docker-permission/
                sed -nr "s/^docker:x:([0-9]+):.*/\1/p" /etc/group > /etc/docker-permission/gid
        install_efs:
          commands:
            01_install_efs:
              command: !Sub
                - |
                  #!/bin/bash
                  
                  LOG_FILE=/var/log/efs.log
                  
                  # include EFS config
                  EFS_FILE_SYSTEM_ID=${FileSystemId}
                  EFS_MOUNT_POINT=${MountPath}
                  
                  #Install NFS client
                  if ! rpm -qa | grep -qw nfs-utils; then
                      yum -y install nfs-utils
                      echo "Installed nfs-utils" >> $LOG_FILE
                  fi
                  
                  EC2_AVAIL_ZONE=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone`
                  EC2_REGION="`echo \"$EC2_AVAIL_ZONE\" | sed -e 's:\([0-9][0-9]*\)[a-z]*\$:\\1:'`"
                  
                  mkdir -p $EFS_MOUNT_POINT
                  
                  DIR_SRC=$EC2_AVAIL_ZONE.$EFS_FILE_SYSTEM_ID.efs.$EC2_REGION.amazonaws.com
                  DIR_TGT=$EFS_MOUNT_POINT
                  
                  echo "$DIR_SRC:/ $DIR_TGT nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0" >> /etc/fstab
                  echo "Added mount entry to fstab:" >> $LOG_FILE
                  tail -n 1 /etc/fstab >> $LOG_FILE
                  
                  mount -a -t nfs4
                  echo "Mounted EFS: $EFS_FILE_SYSTEM_ID" >> $LOG_FILE
                  
                  # Create the EFS group and assign it as the group for the entire EFS volume
                  groupadd -g 555 efs
                  chown -R root:efs $DIR_TGT
                  chmod -R 775 $DIR_TGT
                  
                - FileSystemId: !ImportValue
                    'Fn::Sub': '${EfsStackName}-FileSystemId'
                  MountPath: !Ref 'EfsMountPath'
            02_restart_docker:
              command: service docker restart
                                
  EcsInstanceAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref 'InstanceSubnetIds'
      LaunchConfigurationName: !Ref 'EcsInstanceLc'
      MinSize: !Ref 'AsgMinSize'
      MaxSize: !Ref 'AsgMaxSize'
      DesiredCapacity: !Ref 'AsgDesiredSize'
      Tags:
      - Key: Name
        Value: !Sub 'ECS Container Instance - ${AWS::StackName}'
        PropagateAtLaunch: 'true'
    CreationPolicy:
        # Ensure we wait for a signal from each instance to know when its done bootstrapping
        ResourceSignal:
            Timeout: PT15M
    UpdatePolicy:
        # Any changes to the ASG should update instances in a rolling fashion rather than tearing them all down at
        # once
        AutoScalingRollingUpdate:
            MinInstancesInService: 1
            MaxBatchSize: 1
            PauseTime: PT15M
            WaitOnResourceSignals: true

  # Auto Scaling Policies and Alarms

  MemScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref 'EcsInstanceAsg'
      PolicyType: StepScaling
      AdjustmentType: PercentChangeInCapacity
      MetricAggregationType: Average
      EstimatedInstanceWarmup: '60'
      StepAdjustments:
      - MetricIntervalLowerBound: '0'
        MetricIntervalUpperBound: '10'
        ScalingAdjustment: '0'
      - MetricIntervalLowerBound: '10'
        MetricIntervalUpperBound: '20'
        ScalingAdjustment: '10'
      - MetricIntervalLowerBound: '20'
        ScalingAdjustment: '30'

  MemScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref 'EcsInstanceAsg'
      PolicyType: StepScaling
      AdjustmentType: PercentChangeInCapacity
      MetricAggregationType: Average
      EstimatedInstanceWarmup: '120'
      StepAdjustments:
      - MetricIntervalLowerBound: '-10'
        MetricIntervalUpperBound: '0'
        ScalingAdjustment: '0'
      - MetricIntervalLowerBound: '-20'
        MetricIntervalUpperBound: '-10'
        ScalingAdjustment: '-10'
      - MetricIntervalUpperBound: '-20'
        ScalingAdjustment: '-30'

  MemResAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Memory alarm for ECS cluster high memory reserve
      AlarmActions: [!Ref 'MemScaleUpPolicy']
      MetricName: MemoryReservation
      Namespace: AWS/ECS
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '3'
      Threshold: '60'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: ClusterName
        Value: !Ref 'AWS::StackName'

  MemUtilAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Memory alarm for ECS cluster high memory usage
      AlarmActions: [!Ref 'MemScaleUpPolicy']
      MetricName: MemoryUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '2'
      Threshold: '60'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: ClusterName
        Value: !Ref 'AWS::StackName'

  MemResAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Memory alarm for ECS cluster low memory reserve
      AlarmActions: [!Ref 'MemScaleDownPolicy']
      MetricName: MemoryReservation
      Namespace: AWS/ECS
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '10'
      Threshold: '30'
      ComparisonOperator: LessThanThreshold
      Dimensions:
      - Name: ClusterName
        Value: !Ref 'AWS::StackName'

Outputs:
  # VpcId is required by various AWS Resources, so let the dependant stack refer to the VpcId
  VpcId:
    Description: VPC ID
    Value: !Ref 'VpcId'
    Export:
      Name: !Sub '${AWS::StackName}-VpcId'
  LoadBalancerSecurityGroup:
    Description: The ID of the security group which LoadBalancers must be a part of to communicate with ECS Instances
    Value: !GetAtt [LoadBalancerSecurityGroup, GroupId]
    Export:
      Name: !Sub '${AWS::StackName}-EcsLoadBalancerSecurityGroupId'
  # A dependant stack can use this ECS Service role instead of creating its own. It is generic for all services
  ServiceRole:
    Description: The ARN of the ECS service role
    Value: !GetAtt [EcsServiceRole, Arn]
    Export:
      Name: !Sub '${AWS::StackName}-EcsServiceRole'
  ClusterName:
    Description: The name of the ECS Cluster created
    Value: !Ref 'Cluster'
    Export:
      Name: !Sub '${AWS::StackName}-ClusterName'
  MountPath:
      Description: The path at which the EFS volume is mounted
      Value: !Ref 'EfsMountPath'
      Export:
        Name: !Sub '${AWS::StackName}-MountPath'
